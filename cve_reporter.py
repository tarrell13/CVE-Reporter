#!/usr/bin/python

'''
Program Name: CVE_Reporter.py

Synopsis: This program will take a list of CVE's and also an export of Nessus Scan Results and return a list of CVE to plugin IDs to show
host that are still affected. 

Log:
	(1) Added functionality to accept config file, which recursively loops through all items to perform the report
	(2) Functionality to dig through each data list to determine if CVE is remediated or not based on open finding 

	3/27/18
		(1) Create functionality to drop data into an output directory and group output and remediation into a single directory
		(2) Added functionality to output data in pretty json format

'''

import requests
import getopt
import sys
import json
import urllib3
import progress
import os

# Disable Insecure Warning Messages
urllib3.disable_warnings()

# Nessus API Tokens
access_key = ''
secret_key = ''

# Host to Connect to
host = ""


# Globals
cve_list = ""
output_file = ""
config = ""
CONFIG_MODE = False 
RESUME = False
resume_input = ""

# Nessus API Headers
headers = {"X-ApiKeys" : "accessKey=%s;secretKey=%s" %(access_key,secret_key),
		"content-type": "application/json"}



class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    CYAN = '\033[96m'
    RED = '\033[31m'


# Check API Key authorization
def check_auth():

        response = json.loads(requests.get('https://%s:8834/scans' %host, headers=headers, verify=False).content)

        if response.has_key('error') and response['error'] == 'Invalid Credentials':
                print(bcolors.FAIL+"[*] Login Failed...Check API Keys"+bcolors.ENDC)
                sys.exit()
        return bcolors.OKGREEN+"[*] Login Successful"+bcolors.ENDC

# Shows program usage
def usage():
    print("Usage: ./nessus_cve_reporter.py -i <input file> -w <output file>")
    print("Options: ")
    print("-i, --input-file: CVE Input File")
    print("-w, --write:      Filename to write to")
    print("-c, --config:     Configuration File to Use")
    print("-r, --resume:     If resuming, specify saved data file")
    print("")
    print("Example: (1) ./nessus_cve_reporter.py -i cve_list.txt -w results.txt")
    print("	    (2) ./nessus_cve_reporter.py -c config.txt")
    sys.exit()

# Setting MODE
def operations(arguments):

    global cve_list, output_file, config, CONFIG_MODE, RESUME, resume_input

    try:
        getopt.getopt(arguments[1:], "i:w:c:r",["input-file", "write", "config", "resume"])
    except getopt.GetoptError as err:
        print(str(err))
        usage()

    for i in range(1, len(arguments)):
    	if arguments[i] == "-i" or arguments[i] == "--input-file":
        	cve_list = open(arguments[i+1], "r").readlines()
        if arguments[i] == "-w" or arguments[i] == "--write":
            	output_file = arguments[i+1]
        if arguments[i] == "-c" or arguments[i] == "--config":
	   	CONFIG_MODE = True
	   	cve_list = ""
	   	output_file = ""
	   	config = json.loads(open(arguments[i+1], "r").read())
	if arguments[i] == "-r" or arguments[i] == "--resume":
		RESUME = True
		resume_input = json.loads(open(arguments[i+1], "r").read())


# Function to add each family ID into an array
def family_list():

        # Stage increment variable for count
        family_id = []

        family_list = json.loads(requests.get("https://%s:8834/plugins/families" %host, headers=headers, verify=False).content)


        for i in range(len(family_list['families'])):
                family_id.append(family_list['families'][i]['id'])

        return family_id

def total_plugins(family_id):

        plugin_ids = []

        # Iterate through entire family list
        for fam_id in range(len(family_id)):
                plugin_request = json.loads(requests.get("https://%s:8834/plugins/families/%d" %(host,int(family_id[fam_id])), headers=headers, verify=False).content)

                for plug_id in range(len(plugin_request['plugins'])):
                        plugin_ids.append(plugin_request['plugins'][plug_id]['id'])

        return plugin_ids


# Converts all lines in the cve input file into lower case characters
def cve_to_lower():

        global cve_list

        for cve in range(len(cve_list)):
                cve_list[cve] = cve_list[cve].strip('\n').lower()




def cve_plugin_search(plugins,inputname=""):

	check_auth()

        plugin_id_list = []
        cve_to_lower()

	cve_data_dict = {}

        print("")
	if CONFIG_MODE == True:
        	print(bcolors.OKGREEN+"[+]"+bcolors.ENDC+" Parsing each plugin for possible match on CVEs for CVE FILE: %s" %os.path.basename(inputname))
	else:
		print(bcolors.OKGREEN+"[+]"+bcolors.ENDC+" Parsing each plugin for possible match on CVEs")

        for count in range(len(plugins)):
                details = json.loads(requests.get("https://%s:8834/plugins/plugin/%d" %(host,int(plugins[count])), headers=headers, verify=False).content)

                for i in range(len(details['attributes'])):
                        if details['attributes'][i]['attribute_value'].lower() in cve_list:

				if details["attributes"][i]["attribute_value"].upper() in cve_data_dict:
					if plugins[count] in cve_data_dict[details["attributes"][i]["attribute_value"].upper()]:
						continue
					else:	
						cve_data_dict[details["attributes"][i]["attribute_value"].upper()][plugins[count]] = {}
						cve_data_dict[details["attributes"][i]["attribute_value"].upper()][plugins[count]]["name"] = details["name"]
                                         	cve_data_dict[details["attributes"][i]["attribute_value"].upper()][plugins[count]]["hosts"] = []
				else:
					cve_data_dict[details["attributes"][i]["attribute_value"].upper()] = {}	
					cve_data_dict[details["attributes"][i]["attribute_value"].upper()][plugins[count]] = {}
					cve_data_dict[details["attributes"][i]["attribute_value"].upper()][plugins[count]]["name"] = details["name"]
					cve_data_dict[details["attributes"][i]["attribute_value"].upper()][plugins[count]]["hosts"] = []

                               
                progress.progress(count, len(plugins)-1)

        print("\n")

        return json.dumps(cve_data_dict)



# Function used to retrieve host IDs from scan
def hosts_retrieval(selection):

	print(bcolors.HEADER+"[+]"+bcolors.ENDC+" Downloading Scan Data")

	host_ids = []
	scan = json.loads(requests.get("https://%s:8834/scans/%d" %(host,int(selection)), headers=headers, verify=False).content)
	
	for i in range(len(scan["hosts"])):
		host_ids.append(scan["hosts"][i]["host_id"])
	
	return host_ids
			
# Function used to gather list of host vulnerabilities
def hosts_vulnerabilities(host_id_list,selection):

	host_list = []
	
	print(bcolors.OKGREEN+"[+]"+bcolors.ENDC+" Retrieving Host Data from Scan")

	for i in range(len(host_id_list)):
		host_list.append(json.loads(requests.get("https://%s:8834/scans/%d/hosts/%d" %(host, int(selection),int(host_id_list[i])), headers=headers, verify=False).content))

	return host_list	

# Function used to parse host data for match on CVE DATA LIST
def host_cve_plugin_match(data_list, host_list):
	
	print(bcolors.OKGREEN+"[+]"+bcolors.ENDC+" Searching Scan Results for Matches")

	for id in range(len(host_list)):
		for cve, data in data_list.iteritems():
			for vuln in range(len(host_list[id]["vulnerabilities"])):
				if str(host_list[id]["vulnerabilities"][vuln]["plugin_id"]) in str(data_list[cve]):
					plugin = str(host_list[id]["vulnerabilities"][vuln]["plugin_id"])
			
					try:
						data_list[cve][plugin]["hosts"].append(host_list[id]["info"]["host-ip"])
					except KeyError:
						continue

		progress.progress(id, len(host_list)-1)
	
	print("")
	return data_list	

def save_data_list(data):

	filename = open("cve_parse.save", "w")
	filename.write(data)
	filename.close()


# If a config file is used, the loop through config file for each scan						
def config_file_mode(plugins):

	global cve_list

	# Used to save scan cve list if next scan's input file is different
	save_data = {}

	# Load saved data file if resuming
	if RESUME:
		save_data = resume_input	
	
	for scan, fields in config.iteritems():

		# Loading intial cve list file	
		if cve_list == "":
			
			# Open CVE Input File if its not in the save_data list
                        cve_list = open(config[scan]["input"], "r").readlines()
                        # Parse through plugins again if Input file has changed
	
			if RESUME and os.path.basename(config[scan]["input"]) in save_data:
				data_list = save_data[os.path.basename(config[scan]["input"])]
			else:
                        	data_list = cve_plugin_search(plugins, config[scan]["input"])
				save_data[os.path.basename(config[scan]["input"])] = {}
				save_data[os.path.basename(config[scan]["input"])] = data_list
				save_data_list(json.dumps(save_data,indent=4))

			cve_list_name = os.path.basename(config[scan]["input"])
		
		# Restore data list from save data if new file needs to reference previous cve list 
		elif cve_list_name != os.path.basename(config[scan]["input"]):
			if os.path.basename(config[scan]["input"]) not in save_data:
				cve_list = open(config[scan]["input"],"r").readlines()
				data_list = cve_plugin_search(plugins, config[scan]["input"])
				save_data[os.path.basename(config[scan]["input"])] = {}
				save_data[os.path.basename(config[scan]["input"])] = data_list
				save_data_list(json.dumps(save_data,indent=4))
				cve_list_name = os.path.basename(config[scan]["input"])	

			elif os.path.basename(config[scan]["input"]) in save_data:
				data_list = save_data[os.path.basename(config[scan]["input"])]


		# Grab scan id from config file
		selection = config[scan]["id"]		
		final_list = host_cve_plugin_match(json.loads(data_list), hosts_vulnerabilities(hosts_retrieval(selection),selection))
		write_out(json.dumps(final_list, indent=4, sort_keys=True), config[scan]["output"], scan)
			
# Function will read through output files and determine if CVEs are possibly remediated based on findings
def remediation_check():

	
	if CONFIG_MODE == True:

                print(bcolors.WARNING+"[+]"+bcolors.ENDC+" Performing Remediation Check")

		for scan, data in config.iteritems():
			results = json.loads(open("Dump/"+scan+"/"+config[scan]["output"], "r").read())
			
			cve_fail = []
			cve_pass = []

			for cve, items in results.iteritems():

				cve_total = len(results[cve])	
				counter = 1

				for plugin, meta in results[cve].iteritems():
						
					if counter == cve_total:
						if not results[cve][plugin]["hosts"]:
							cve_pass.append(cve)
						elif results[cve][plugin]["hosts"]:
							cve_fail.append(cve)
					elif not results[cve][plugin]["hosts"]:
						counter += 1
						continue
					elif results[cve][plugin]["hosts"]:
						cve_fail.append(cve)
						break
				counter = 1
			

			
			if os.path.isdir("Dump"):
				if os.path.isdir("Dump/"+scan):
					filename = open("Dump/"+scan+"/remediation_check_"+config[scan]["output"], "w")
				else:
					os.makedirs("Dump/"+scan)
					filename = open("Dump/"+scan+"/remediation_check_"+config[scan]["output"], "w")
			else:
				os.path.makedirs("Dump")
				if os.path.isdir("Dump/"+scan):
					filename = open("Dump/"+scan+"/remediation_check_"+config[scan]["output"], "w")
				else:
					os.makedirs("Dump/"+scan)
					filename = open("Dump/"+scan+"/remediation_check_"+config[scan]["output"], "w")

                	filename.write("")
                	filename.write("######################\n")
                	filename.write("# Remediation Check  #\n")
                	filename.write("######################\n\n")

                	if cve_pass:

                        	for i in range(len(cve_pass)):
                                	filename.write(cve_pass[i]+" => PASS\n")

                	if cve_fail:

                        	for i in range(len(cve_fail)):
                                	filename.write(cve_fail[i]+" => FAIL\n")

                	print(bcolors.CYAN+"[+]"+bcolors.ENDC+" Filename: remediation_check_"+config[scan]["output"]+" written")
                	filename.close()

	else:

		print(bcolors.OKGREEN+"[+]"+bcolors.ENDC+" Performing Remediation Check")
		results = json.loads(open("Dump/"+output_file, "r").read())
		
		cve_fail = []
                cve_pass = []

                for cve, items in results.iteritems():

			cve_total = len(results[cve])
			counter = 1 			

                        for plugin, meta in results[cve].iteritems():
                        	        
				if counter == cve_total:
					if not results[cve][plugin]["hosts"]:
						cve_pass.append(cve)
					elif results[cve][plugin]["hosts"]:
						cve_fail.append(cve)

				elif not results[cve][plugin]["hosts"]:
					counter += 1
                                        continue
                                elif results[cve][plugin]["hosts"]:
                                        cve_fail.append(cve)
                                        break
                        counter = 1  


		if os.path.isdir("Dump"):
			filename = open("Dump/remediation_check_"+output_file, "w")
		else:
			os.path.makedirs("Dump")
			filename = open("Dump/remediation_check_"+output_file, "w")		
		
		filename.write("")
		filename.write("######################\n")
		filename.write("# Remediation Check  #\n")
		filename.write("######################\n\n")

		if cve_pass:

                        for i in range(len(cve_pass)):
                                filename.write(cve_pass[i]+" => PASS\n")

		if cve_fail: 

			for i in range(len(cve_fail)):
				filename.write(cve_fail[i]+" => FAIL\n")

		print(bcolors.CYAN+"[+]"+bcolors.ENDC+" Filename: remediation_check_"+output_file+" written")
		filename.close()

				
	
# Function will be used to write data to output file
def write_out(data, outputname="", scan=""):

	if outputname == "":
		if os.path.isdir("Dump"):
			filename = open("Dump/"+output_file, "w")
		else:
			os.makedirs("Dump")
			filename = open("Dump/"+output_file, "w")
	# Config Mode Write
	else:
		if os.path.isdir("Dump"):
			if os.path.isdir("Dump/"+scan):
				filename = open("Dump/"+scan+"/"+outputname, "w")
			else:
				os.makedirs("Dump/"+scan)
				filename = open("Dump/"+scan+"/"+outputname, "w")
		else:
			os.makedirs("Dump")
			if os.path.isdir("Dump/"+scan):
				filename = open("Dump/"+scan+"/"+outputname, "w")
			else:
				os.makedirs("Dump/"+scan)
				filename = open("Dump/"+scan+"/"+outputname, "w")

	filename.write(data)
	filename.close()
	
	if CONFIG_MODE == True:
		print(bcolors.CYAN+"[+]"+bcolors.ENDC+" Filename: "+outputname+" written")
	else:
		print(bcolors.CYAN+"[+]"+bcolors.ENDC+" Filename: "+output_file+" written")
	print("")

def main():

	global config

	print(bcolors.CYAN+"  _____________   _______________ __________                             __		 ")                
	print("  \_   ___ \   \ /   /\_   _____/ \______   \ ____ ______   ____________/  |_  ___________  ")
	print("  /    \  \/\   Y   /  |    __)_   |       _// __ \\\\____ \ /  _ \_  __ \   __\/ __ \_  __ \\")
	print("  \     \____\     /   |        \  |    |   \  ___/|  |_> >  <_> )  | \/|  | \  ___/|  | \/ ")
	print("   \______  / \___/   /_______  /  |____|_  /\___  >   __/ \____/|__|   |__|  \___  >__|    ")
        print("          \/                  \/          \/     \/|__|                           \/        "+bcolors.ENDC)
	print("")
	
	
	if len(sys.argv) < 3:
		usage()

	print(check_auth())
	operations(sys.argv)

	# IF Config mode is enabled, then read the configuration file 	
	if CONFIG_MODE:
		plugins = total_plugins(family_list())
		config_file_mode(plugins)
		remediation_check()
		sys.exit()	

	# Else ask the user for the scan ID and use input fields
	selection = raw_input(bcolors.OKGREEN+"[+]"+bcolors.ENDC+" Select Scan ID: ")
	plugins = total_plugins(family_list())
	
	# Build CVE Data List
	data_list = cve_plugin_search(plugins)
	# Create Method to Parse Through and append affected host
	
	final_list = host_cve_plugin_match(json.loads(data_list), hosts_vulnerabilities(hosts_retrieval(selection),selection))
	write_out(json.dumps(final_list, indent=4, sort_keys=True))
	remediation_check()

main()





